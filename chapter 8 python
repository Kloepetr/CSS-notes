{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kloepetr/CSS-notes/blob/main/chapter%208%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I0uqh2EPBBAa"
      },
      "source": [
        "# FUNCTIONS\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9G2nR_qdBBAd"
      },
      "source": [
        "### Defining a Function\n",
        "- Passing Information to a Function\n",
        "- Arguments and Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lmSqxpGaBBAe",
        "outputId": "cbbe07e5-04ef-48c9-8287-2c005efcb4ae"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "hello\n"
          ]
        }
      ],
      "source": [
        "# example\n",
        "def greet_user():\n",
        "    print('hello')\n",
        "greet_user()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LJt556OaBBAf",
        "outputId": "d0814865-a70b-4212-e75f-646f36ffe526"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "hello Emma\n"
          ]
        }
      ],
      "source": [
        "# Passing Information to a Function\n",
        "def greet_user(username):\n",
        "    print(f'hello {username.title()}')\n",
        "greet_user('emma')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1CTSSaTpBBAf"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LwDiwYxUBBAg"
      },
      "source": [
        "**8-1. Message:**   \n",
        "Write a function called `display_message()` that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "outputId": "b4741402-64d2-4d23-f017-0a20321729f3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bENI4Yo-BheV"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hey im learning about functions\n"
          ]
        }
      ],
      "source": [
        "# example\n",
        "def display_message():\n",
        "  print(\"hey im learning about functions\")\n",
        "\n",
        "display_message()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kcolYCLYBBAg"
      },
      "source": [
        "**8-2. Favorite Book:**    \n",
        "Write a function called `favorite_book()` that accepts one parameter, title. The function should print a message, such as *One of my favorite books is Alice in Wonderland*. Call the function, making sure to include a book title as an argument in the function call."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "outputId": "ee19bf01-14a1-4ad2-e102-f23ea257a19e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xhldOlbeB4Lv"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "one of my favorite book is Jojo The Bizarre Journey\n"
          ]
        }
      ],
      "source": [
        "# Passing Information to a Function\n",
        "def favorite_book(book):\n",
        "    print(f'one of my favorite book is {book.title()}')\n",
        "favorite_book('jojo the bizarre journey')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z9RkfhkwBBAh"
      },
      "source": [
        "### Passing Arguments\n",
        "---\n",
        "- Positional Arguments\n",
        "- Multiple Function Calls\n",
        "- Order Matters in Positional Arguments\n",
        "- Keyword Arguments\n",
        "- Default Values\n",
        "- Equivalent Function Calls\n",
        "- Avoiding Argument Errors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rmc-5qGnBBAh",
        "outputId": "c6f9b551-0e9b-4a18-90f1-a9966c64c57b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "I have a hamster\n",
            "\n",
            "My hamster's name is Bob\n"
          ]
        }
      ],
      "source": [
        "# Positional Arguments\n",
        "def describe_pet(type, name):\n",
        "    print(f'I have a {type}')\n",
        "    print(f\"\\nMy {type}'s name is {name.title()}\")\n",
        "describe_pet('hamster', 'bob')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HmlnvNcFBBAh",
        "outputId": "0b9f2b48-449f-492e-b3f8-57d6938bebae"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "I have a hamster\n",
            "\n",
            "My hamster's name is Bob\n",
            "I have a dog\n",
            "\n",
            "My dog's name is Fido\n"
          ]
        }
      ],
      "source": [
        "# Multiple Function Calls\n",
        "def describe_pet(type, name):\n",
        "    print(f'I have a {type}')\n",
        "    print(f\"\\nMy {type}'s name is {name.title()}\")\n",
        "describe_pet('hamster', 'bob')\n",
        "describe_pet('dog', 'fido')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oNVXH6KlBBAi",
        "outputId": "dccf3ac3-f50f-4d6a-e2d7-1c85032d3815"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "I have a bob\n",
            "\n",
            "My bob's name is Hamster\n",
            "I have a fido\n",
            "\n",
            "My fido's name is Dog\n"
          ]
        }
      ],
      "source": [
        "# Order Matters in Positional Arguments\n",
        "def describe_pet(type, name):\n",
        "    print(f'I have a {type}')\n",
        "    print(f\"\\nMy {type}'s name is {name.title()}\")\n",
        "describe_pet('bob', 'hamster')\n",
        "describe_pet('fido', 'dog')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hAqQ7YNDBBAi"
      },
      "outputs": [],
      "source": [
        "# Keyword Arguments n/a\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VBzhbBdcBBAi"
      },
      "outputs": [],
      "source": [
        "# Default Values n/a\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n_ZEi2__BBAi"
      },
      "outputs": [],
      "source": [
        "# Equivalent Function Calls n/a\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WJ709DgkBBAi"
      },
      "outputs": [],
      "source": [
        "# Avoiding Argument Errors\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pwEebN5RBBAi"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRKRwdRgBBAj"
      },
      "source": [
        "**8-3. T-Shirt:**   \n",
        "Write a function called `make_shirt()` that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.   \n",
        "Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SSUEFVUbBBAj",
        "outputId": "583b2730-e5b1-4589-a8aa-df976b5204aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I want a big\n",
            "My big shirt saids Hamster\n",
            "I want a small\n",
            "My small shirt saids Dog\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def make_shirt(size, message):\n",
        "    print(f'I want a {size}')\n",
        "    print(f\"My {size} shirt saids {message.title()}\")\n",
        "\n",
        "make_shirt('big', 'hamster')\n",
        "make_shirt('small', 'dog')\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5XLN57fQBBAj"
      },
      "source": [
        "**8-5. Cities:**   \n",
        "Write a function called `describe_city()` that accepts the name of a city and its country. The function should print a simple sentence, such as *Reykjavik is in Iceland*. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ukBBK7TBBAj",
        "outputId": "d38257b2-169d-49d0-c133-65f39b26f19d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I want to visit tokyo\n",
            " tokyo is in Japan\n",
            "I want to visit kyoto\n",
            " kyoto is in Japan\n",
            "I want to visit Osaka\n",
            " Osaka is in Japan\n",
            "I want to visit new york \n",
            " new york  is in America\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def describe_city(city, country):\n",
        "    print(f'I want to visit {city}')\n",
        "    print(f\" {city} is in {country.title()}\")\n",
        "\n",
        "describe_city('tokyo', 'Japan')\n",
        "describe_city('kyoto', 'Japan')\n",
        "describe_city('Osaka', 'Japan')\n",
        "describe_city('new york ', 'America')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0-hWlSEcBBAj"
      },
      "source": [
        "### Return Values\n",
        "---\n",
        "- Returning a Simple Value\n",
        "- Making an Argument Optional\n",
        "- Returning a Dictionary\n",
        "- Using a Function with a `while` Loop"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rYEuO7WuBBAk",
        "outputId": "b83bbf46-89af-4f97-bea0-f2f51221f635"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Selina Gomez\n"
          ]
        }
      ],
      "source": [
        "# Returning a Simple Value\n",
        "def get_formatted_name(first_name, last_name):\n",
        "    full_name = f\"{first_name} {last_name}\"\n",
        "    return full_name.title()\n",
        "musician = get_formatted_name('selina', 'gomez')\n",
        "print(musician)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_zILLbrOBBAk"
      },
      "outputs": [],
      "source": [
        "# Making an Argument Optional n/a\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oL-i_xh2BBAk",
        "outputId": "4e65d18d-2d68-42c5-8b9f-6094f6cac71a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'first': 'jimi', 'last': 'hendrix'}\n"
          ]
        }
      ],
      "source": [
        "# Returning a Dictionary\n",
        "def build_person(first_name, last_name):\n",
        "    person = {'first': first_name, 'last': last_name}\n",
        "    return person\n",
        "musician = build_person('jimi', 'hendrix')\n",
        "print(musician)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CnKrVWzmBBAk",
        "outputId": "daf266f9-c7b6-40e8-fe65-7d99827ea89b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Seth Pizzo\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Nino Pizzo\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Angelo Pizzo\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Jimi Hendrix\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Cam Southern\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n",
            "\n",
            "Hello, Hazel Roeder\n",
            "\n",
            "Please tell me your name:\n",
            "(enter 'q' at any time to quit)\n"
          ]
        }
      ],
      "source": [
        "# Using a Function with a while Loop\n",
        "def get_formatted_name(first_name, last_name):\n",
        "    full_name = f\"{first_name} {last_name}\"\n",
        "    return full_name.title()\n",
        "\n",
        "while True:\n",
        "    print(\"\\nPlease tell me your name:\")\n",
        "    print(\"(enter 'q' at any time to quit)\")\n",
        "    f_name = input('First name: ')\n",
        "    if f_name == 'q':\n",
        "        break\n",
        "    l_name = input('Last name: ')\n",
        "    if l_name == 'q':\n",
        "        break\n",
        "\n",
        "    formatted_name = get_formatted_name(f_name, l_name)\n",
        "    print(f\"\\nHello, {formatted_name}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sTS4R1lfBBAk"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T_enoAt_BBAk"
      },
      "source": [
        "**8-6. City Names:**   \n",
        "Write a function called `city_country()` that takes in the name of a city and its country. The function should return a string formatted like this:   \n",
        "\n",
        "        \"Santiago, Chile\"\n",
        "        \n",
        "Call your function with at least three city-country pairs, and print the values that are returned."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y8d2YTQVBBAk",
        "outputId": "bd81f0b9-d5ec-4a8a-cd1c-4505d3a28594"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Santiago, Chile\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def city_country(city, country):\n",
        "    return f\"{city.title()}, {country.title()}\"\n",
        "print(city_country('Santiago', 'Chile'))\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0CVYZtYbBBAl"
      },
      "source": [
        "**8-7. Album:**   \n",
        "Write a function called `make_album()` that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.   \n",
        "Use `None` to add an optional parameter to `make_album()` that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album’s dictionary. Make at least one new function call that includes the number of songs on an album."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTuHlY4dBBAl",
        "outputId": "6bf79fa5-946e-4a0f-9d37-4d895109ac2b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'artist': 'The Beatles', 'title': 'Abbey Road'}\n",
            "{'artist': 'Led Zeppelin', 'title': 'IV'}\n",
            "{'artist': 'Pink Floyd', 'title': 'The Wall', 'number_of_songs': 26}\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def make_album(artist_name, album_title, number_of_songs=None):\n",
        "    album = {'artist': artist_name, 'title': album_title}\n",
        "    if number_of_songs:\n",
        "        album['number_of_songs'] = number_of_songs\n",
        "    return album\n",
        "album1 = make_album('The Beatles', 'Abbey Road')\n",
        "album2 = make_album('Led Zeppelin', 'IV')\n",
        "album3 = make_album('Pink Floyd', 'The Wall', 26)\n",
        "\n",
        "print(album1)\n",
        "print(album2)\n",
        "print(album3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D4xbTczcBBAl"
      },
      "source": [
        "**8-8. User Albums:**   \n",
        "Start with your program from Exercise 8-7. Write a `while` loop that allows users to enter an album’s artist and title. Once you have that information, call `make_album()` with the user’s input and print the dictionary that’s created. Be sure to include a quit value in the `while` loop."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LXRXaskEBBAl",
        "outputId": "131602e4-fb12-4f24-bfff-9eddafc0b784"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter the artist name and album title (enter 'q' to quit):\n",
            "Artist name: bad bunny\n",
            "Album title: cpcp\\\n",
            "{'artist': 'bad bunny', 'title': 'cpcp\\\\'}\n",
            "Enter the artist name and album title (enter 'q' to quit):\n",
            "Artist name: q\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def make_album(artist_name, album_title, number_of_songs=None):\n",
        "    album = {'artist': artist_name, 'title': album_title}\n",
        "    if number_of_songs:\n",
        "        album['number_of_songs'] = number_of_songs\n",
        "    return album\n",
        "\n",
        "while True:\n",
        "    print(\"Enter the artist name and album title (enter 'q' to quit):\")\n",
        "    artist_name = input(\"Artist name: \")\n",
        "    if artist_name == 'q':\n",
        "        break\n",
        "    album_title = input(\"Album title: \")\n",
        "    if album_title == 'q':\n",
        "        break\n",
        "\n",
        "    album = make_album(artist_name, album_title)\n",
        "    print(album)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sEfvbtq-BBAl"
      },
      "source": [
        "### Passing a List\n",
        "---\n",
        "- Modifying a List in a Function\n",
        "- Preventing a Function from Modifying a List"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eXyoq_kqBBAl",
        "outputId": "cb1796e3-eb66-4ea0-eebc-97114b5f62f3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hello, Clive!\n",
            "Hello, Leo!\n",
            "Hello, Kiefer!\n",
            "Hello, Emma!\n",
            "Hello, Rebekah!\n"
          ]
        }
      ],
      "source": [
        "# Modifying a List in a Function\n",
        "def greet_users(names):\n",
        "    for name in names:\n",
        "        msg = f'Hello, {name.title()}!'\n",
        "        print(msg)\n",
        "usernames = ['clive', 'leo', 'kiefer', 'emma', 'rebekah']\n",
        "greet_users(usernames)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bO5rSKC6BBAl",
        "outputId": "db330b24-c572-48dd-d6e4-baa24ca09432"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Printing model: dodecahedron\n",
            "Printing model: robot pendant\n",
            "Printing model: phone case\n",
            "\n",
            "The following models have been printed:\n",
            "dodecahedron\n",
            "robot pendant\n",
            "phone case\n"
          ]
        }
      ],
      "source": [
        "# Preventing a Function from Modifying a List\n",
        "def print_models(unprinted_designs, completed_models):\n",
        "    \"\"\"   describe function here\n",
        "            parameter1 ...\n",
        "            parameter2 ...\n",
        "            return value\n",
        "    \"\"\"\n",
        "    while unprinted_designs:\n",
        "        current_design = unprinted_designs.pop()\n",
        "        print(f\"Printing model: {current_design}\")\n",
        "        completed_models.append(current_design)\n",
        "\n",
        "def show_completed_models(completed_models):\n",
        "    print(\"\\nThe following models have been printed:\")\n",
        "    for completed_model in completed_models:\n",
        "        print(completed_model)\n",
        "unprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\n",
        "completed_models = []\n",
        "print_models(unprinted_designs[:], completed_models)\n",
        "show_completed_models(completed_models)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-QQqA5v5BBAm"
      },
      "source": [
        "### TRY IT YOURSELF\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qGBu2wM0BBAm"
      },
      "source": [
        "**8-9. Messages:**   \n",
        "Make a list containing a series of short text messages. Pass the list to a function called `show_messages()`, which prints each text message."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pht36OEcBBAm",
        "outputId": "6d38f578-d6ac-49b0-d42a-9bdc090faccd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, how are you?\n",
            "how are you\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def show_messages(messages):\n",
        "    for message in messages:\n",
        "        print(message)\n",
        "messages = [\n",
        "    \"Hello, how are you?\",\n",
        "    \"how are you\"\n",
        "]\n",
        "\n",
        "show_messages(messages)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aoH7vi48BBAm"
      },
      "source": [
        "**8-10. Sending Messages:**   \n",
        "Start with a copy of your program from Exercise 8-9. Write a function called `send_messages()` that prints each text message and moves each message to a new list called `sent_messages` as it’s printed. After calling the function, print both of your lists to make sure the messages were moved correctly."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U011miiNBBAm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c8b5c86-6394-416a-eac6-3402587dfcb2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello, how are you\n",
            "how are you?\n",
            "good\n",
            "good\n",
            "how are you?\n",
            "hello, how are you\n",
            "<function send_messages at 0x7f8a84948b80>\n"
          ]
        }
      ],
      "source": [
        "# code\n",
        "def show_messages(messages):\n",
        "    for message in messages:\n",
        "        print(message)\n",
        "\n",
        "def send_messages(messages, sent_messages):\n",
        "    while messages:\n",
        "        current_message = messages.pop()\n",
        "        print(current_message)\n",
        "        sent_messages.append(current_message)\n",
        "\n",
        "messages = [\"hello, how are you\", \"how are you?\", \"good\"]\n",
        "show_messages(messages)\n",
        "\n",
        "sent_messages = []\n",
        "send_messages(messages, sent_messages)\n",
        "\n",
        "print(send_messages)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W7QJhrilBBAm"
      },
      "source": [
        "**8-11. Archived Messages:**   \n",
        "Start with your work from Exercise 8-10. Call the function `send_messages()` with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qa66zCQyBBAm"
      },
      "outputs": [],
      "source": [
        "# code\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "a93b6de8cfd74e77be02faa0aaaec4781685ea069679a608336306e47493dd76"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}